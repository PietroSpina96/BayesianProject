}
}
Mahalanobis_Distance <- matrix(0, nrow = 26, ncol = 26)
for (i in 1:26){
#print(i)
for (j in 1:26){
Mahalanobis_Distance[i,j] <- alpha_Mahalanobis(alpha,f.data$ausxSL$data[i,],f.data$ausxSL$data[j,],lambda,eigenft)
}
}
x11()
image.plot(1:26,1:26,Mahalanobis_Distance)
load('functional_WP.RData')
n <- 26
t_points <- 1600
time<-seq(1,t_points)
X_bar <- colMeans(f.data$ausxSL$data) # functional mean
x11()
plot(t(importMatrix(res, type = c('SL', 'sx'), position = 'au'))[1,], type = "l", ylim = c(-250, 250))
for(i in 1:26){
lines(t(importMatrix(res, type = c('SL', 'sx'), position = 'au'))[i,], lwd=1)
}
lines(f.data$ausxSL$argvals, X_bar, type = 'l', lwd=3, col = 'firebrick2')
# Covariance matrix for the data: K_hat_R is the covariance matrix computed through the R function cov
K_hat_R <- cov(f.data$ausxSL$data)
scalar_prod<- function (f1,f2) {
# f sono vettori colonna
res<- t(f1)%*%f2
return(res)
}
# equivalentemennte
#scalar_prod_norm<- function (f1,f2) {
# f sono vettori colonna
#f1<-as.matrix(f1)
#f2<-as.matrix(f2)
#res<- (norm(f1+f2,'2')^2 - norm(f1-f2,'2')^2)/4
#return(res)
#}
# Compute eigenvalues and eigenfunctions of the covariance matrix
# eigenvf<-eigen(K_hat)
# lambda<-eigenvf$values
# eigenft<-eigenvf$vectors
eigenvf<-eigen(K_hat_R)
lambda<-eigenvf$values
eigenft<-eigenvf$vectors
alpha_Mahalanobis <- function(alpha,f1,f2,lambda, eigenft) {
dis<-coeff<-prod<-rep(0,t_points)
for (j in 1:t_points){
coeff[j]<-lambda[j]/(lambda[j]+alpha)^2
prod[j]<-(scalar_prod(f1-f2,eigenft[,j]))^2
dis[j]<-coeff[j]*prod[j]
}
res<-sum(dis)
return(res)
}
# approximation of the function f with f_alpha
f_alpha_approx <-function(f,alpha,lambda,eigenft){
coeff<-prod<-res<-rep(0,t_points)
approx<-matrix(0,t_points,t_points)
for (j in 1:t_points) {
coeff[j]<-lambda[j]/(lambda[j]+alpha)
prod[j]<-scalar_prod(f,eigenft[,j])
approx[,j]<- as.numeric(coeff[j]*prod[j])*eigenft[,j]
res<-res+approx[,j]
}
return(res)
}
norm2_K <- function (f,lambda,eigenft){
norm_vect<-prod<-rep(0,t_points)
for (j in 1:t_points){
prod[j]<-(scalar_prod(f,eigenft[,j]))^2
norm_vect[j]<-prod[j]/lambda[j]
}
res<-sum(norm_vect)
return(res)
}
inner_product_K<- function(f,g,lambda,eigenft) {
prod_vect<-prod_f<-prod_g<-rep(0,t_points)
for (j in 1:t_points){
prod_f[j]<-(scalar_prod(f,eigenft[,j]))
prod_g[j]<-(scalar_prod(g,eigenft[,j]))
norm_vect[j]<-prod_f[j]*prod_g[j]/lambda[j]
}
res<-sum(norm_vect)
return(res)
}
x11()
f_prova <- f.data$ausxSL$data[1,]
x11()
plot(t(importMatrix(res, type = c('SL', 'sx'), position = 'au'))[1,], type = "l", ylim = c(-250, 250), lwd=2)
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,0.1,lambda,eigenft), type = 'l', lwd=2, col = 'firebrick2')
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,0.01,lambda,eigenft), type = 'l', lwd=2, col = 'blue')
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,0.0001,lambda,eigenft), type = 'l', lwd=2, col = 'forestgreen')
x11()
plot(t(importMatrix(res, type = c('SL', 'sx'), position = 'au'))[1,], type = "l", ylim = c(-250, 250), lwd=2)
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,0.1,lambda,eigenft), type = 'l', lwd=2, col = 'firebrick2')
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,10,lambda,eigenft), type = 'l', lwd=2, col = 'blue')
lines(f.data$ausxSL$argvals, f_alpha_approx(f_prova,0.0001,lambda,eigenft), type = 'l', lwd=2, col = 'forestgreen')
alpha <- 1e+4
f.data_alpha <- matrix(0, nrow = 26, ncol = 1600)
for (i in 1:26){
f.data_alpha[i,] <- f_alpha_approx(f.data$ausxSL$data[i,],alpha,lambda,eigenft)
}
Mahalanobis_Distance <- matrix(0, nrow = 26, ncol = 26)
for (i in 1:26){
#print(i)
for (j in 1:26){
Mahalanobis_Distance[i,j] <- alpha_Mahalanobis(alpha,f.data$ausxSL$data[i,],f.data$ausxSL$data[j,],lambda,eigenft)
}
}
x11()
image.plot(1:26,1:26,Mahalanobis_Distance)
save.image("~/R/Project_BS/BayesianProject/functional_WP.RData") #GiuliaR
library(fdakma)
x <- kma.data$x
library(fda)
x <- kma.data$x
data(kma.data)
x <- kma.data$x
View(kma.data)
y <- kma.data$y0
x11()
matplot(t(x),t(y0),type='l',xlab=x,ylab='orig. func.')
title('Original functions')
x <- kma.data$x
y0 <- kma.data$y0
x11()
matplot(t(x),t(y0),type='l',xlab=x,ylab='orig. func.')
title('Original functions')
x11()
matplot(t(x),t(y0),type='l',xlab='x',ylab='orig. func.')
title('Original functions')
data4 <- y0
y1 <- kma.data$y1
x11()
matplot(t(x),t(y1),type='l',xlab='x',ylab='orig. func.')
title('Original functions')
data(kma.data)
x <- kma.data$x
y0 <- kma.data$y0
y1 <- kma.data$y1
x11()
matplot(t(x),t(y0),type='l',xlab='x',ylab='orig. func.')
title('Original functions')
load("Simulated_WP.RData")
library(fda)
help("fdakma-package")
data("MontrealTemp")
data("MontrealTemp")
force(MontrealTemp)
data <- MontrealTemp
time <- 1:365
x11()
matplot(time,data)
x11()
matplot(t(time),data)
x11()
matplot(t(time),data[1,])
x11()
matplot(time,data[1,])
x11()
matplot(time,data[1,],type='l')
x11()
matplot(data,type='l')
View(data)
x11()
matplot(data,type='l')
data("CanadianWeather")
force(CanadianWeather)
View(CanadianWeather)
x11()
matplot(t(data),type='l')
data("StatSciChinese")
force(StatSciChinese)
i <- 3
StatSci1 <- StatSciChinese[, i, ]
data("ReginaPrecip")
force(ReginaPrecip)
setwd("C:/Users/admin/Documents/R/AS/OldExams/Old exams (in English)/070920")
load("~/R/LAB/mcshapiro.test.RData")
tide<-read.table('tide.txt',header=TRUE)
View(tide)
ascissa<-tide[,1]
valori<-tide[,2]
plot(ascissa,valori,xlab='Half-hour',ylab='Tide')
water<-read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
setwd("C:/Users/admin/Documents/R/AS/OldExams/Old exams (in English)/190719")
water<-read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
data4 <- CanadianWeather$dailyAv[,,1]
time <- 1:365
x11()
matplot(data_W,type='l',xlab='Day',ylab='Temperature')
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[,1])
for (i in 2:dim(data4)[2])
lines(time,data4[,i])
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[,1],ylim=c(-40,30))
for (i in 2:dim(data4)[2])
lines(time,data4[,i])
data4 <- t(CanadianWeather$dailyAv[,,1])
K4 <- cov(data4)
x11()
image.plot(time,time,K4,main='R cov function')
data5 <- lip
help(lip)
View(data5)
time5<-seq(0,350,by=7)
x11()
matplot(time5,data5,type='l')
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time,data5[i,])
data5 <- t(lip)
time5<-seq(0,350,by=7)
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time,data5[i,])
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
x11()
matplot(time5,data5,type='l')
x11()
matplot(time5,t(data5),type='l')
x11()
plot(time5,data5[1,],ylim=c(-20,15))
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
x11()
plot(time5,data5[1,],ylim=c(-15,15),type='l')
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
K5 <- cov(data5)
x11()
image.plot(time5,time5,K5,main='Covariance matrix')
data6 <- read.table('watertemp.txt',header=TRUE)
View(data6)
zona<-water[,366]
water <- read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
water<-water[,1:365]
giorni<-1:365
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
View(water)
water <- read.table('watertemp.txt',header=TRUE)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
x11()
plot(giorni,water[1,],ylim=c(0,30),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,30),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
help(plot)
help(palette)
palette.colors()
help(rainbow)
hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
n<-dim(water)[1]
hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
col_palette<-hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col<-col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
n<-dim(water)[1]
col_palette<-hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow())
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow(dim(data))[1])
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col = rep(1:dim(water)[1])
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
n <- dim(water)[1]
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='lightblue')
for (i in 31:85)
lines(giorni,water[i,],col='mistyrose')
for (i in 86:n)
lines(giorni,water[i,],col='lightcyan')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='blue')
for (i in 31:85)
lines(giorni,water[i,],col='mistyrose')
for (i in 86:n)
lines(giorni,water[i,],col='orange')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='blue')
for (i in 31:85)
lines(giorni,water[i,],col='green')
for (i in 86:n)
lines(giorni,water[i,],col='orange')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,],col='grey')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,])
data4 <- t(CanadianWeather$dailyAv[,,1])
time <- 1:365
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
K4 <- cov(data4)
x11()
image.plot(time,time,K4,main='Covariance matrix')
data5 <- t(lip)
time5<-seq(0,350,by=7)
x11()
matplot(time5,t(data5),type='l')
water <- read.table('watertemp.txt',header=TRUE)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
# Commentate i set delle directory non vostre
#setwd("C:/Users/pietr/Desktop/Bayesian Statistics/Progetto/dati/BayesianProject")
setwd("C:/Users/admin/Documents/R/Project_BS/BayesianProject") #GiuliaR
load("Simulated_WP.RData")
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
time <- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
# Covariance matrix and plot
K_4 <- cov(data4)
x11()
image.plot(time,time,K_4,main='Covariance matrix')
eig_4 <- eigen(K_4)
values_4 <- eig_4$values
vectors_4 <- eig_4$vectors
View(vectors_4)
View(vectors_3)
data5 <- read.table('data_model5.txt',header=TRUE)
data5<-data5[,1:365]
time<-1:365
n <- dim(water)[1]
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,])
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
n <- dim(water)[1]
time<-1:365
n <- dim(data5)[1]
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
# Covariance matrix and plot
K_5 <- cov(data5)
x11()
image.plot(time,time,K_5,main='Covariance matrix')
eig_5 <- eigen(K_5)
values_5 <- eig_5$values
vectors_5 <- eig_5$vectors
gc()
# Commentate i set delle directory non vostre
#setwd("C:/Users/pietr/Desktop/Bayesian Statistics/Progetto/dati/BayesianProject")
setwd("C:/Users/admin/Documents/R/Project_BS/BayesianProject") #GiuliaR
load("Simulated_WP.RData")
load("Simulated_WP.RData")
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
time <- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
# Covariance matrix and plot
K_4 <- cov(data4)
x11()
image.plot(time,time,K_4,main='Covariance matrix')
eig_4 <- eigen(K_4)
values_4 <- eig_4$values
vectors_4 <- eig_4$vectors
data5 <- read.table('data_model5.txt',header=TRUE)
data5<-data5[,1:365]
time<-1:365
n <- dim(data5)[1]
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
# Covariance matrix and plot
K_5 <- cov(data5)
x11()
image.plot(time,time,K_5,main='Covariance matrix')
eig_5 <- eigen(K_5)
values_5 <- eig_5$values
vectors_5 <- eig_5$vectors
save.image("~/R/Project_BS/BayesianProject/Simulated_WP.RData") #GiuliaR
t_points <- 1:365
rm(time)
load("Simulated_WP.RData")
# Covariance Matrix
time <- seq(0,1,1/(t_points-1))
load("Simulated_WP.RData")
# Covariance Matrix
time <- seq(0,1,1/(t_points-1))
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
t_points<-365
time<- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],1000,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=0.1')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],100,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=0.1')
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],100,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=10')
alpha <- 10
f.data_alpha_sim_4<- matrix(0, nrow = n, ncol = t_points)
for (i in 1:n){
f.data_alpha_sim_4[i,] <- f_alpha_approx(data4[i,],alpha,values_4,vectors_4)
}
