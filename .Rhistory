y1 <- kma.data$y1
x11()
matplot(t(x),t(y0),type='l',xlab='x',ylab='orig. func.')
title('Original functions')
load("Simulated_WP.RData")
library(fda)
help("fdakma-package")
data("MontrealTemp")
data("MontrealTemp")
force(MontrealTemp)
data <- MontrealTemp
time <- 1:365
x11()
matplot(time,data)
x11()
matplot(t(time),data)
x11()
matplot(t(time),data[1,])
x11()
matplot(time,data[1,])
x11()
matplot(time,data[1,],type='l')
x11()
matplot(data,type='l')
View(data)
x11()
matplot(data,type='l')
data("CanadianWeather")
force(CanadianWeather)
View(CanadianWeather)
x11()
matplot(t(data),type='l')
data("StatSciChinese")
force(StatSciChinese)
i <- 3
StatSci1 <- StatSciChinese[, i, ]
data("ReginaPrecip")
force(ReginaPrecip)
setwd("C:/Users/admin/Documents/R/AS/OldExams/Old exams (in English)/070920")
load("~/R/LAB/mcshapiro.test.RData")
tide<-read.table('tide.txt',header=TRUE)
View(tide)
ascissa<-tide[,1]
valori<-tide[,2]
plot(ascissa,valori,xlab='Half-hour',ylab='Tide')
water<-read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
setwd("C:/Users/admin/Documents/R/AS/OldExams/Old exams (in English)/190719")
water<-read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
data4 <- CanadianWeather$dailyAv[,,1]
time <- 1:365
x11()
matplot(data_W,type='l',xlab='Day',ylab='Temperature')
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[,1])
for (i in 2:dim(data4)[2])
lines(time,data4[,i])
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[,1],ylim=c(-40,30))
for (i in 2:dim(data4)[2])
lines(time,data4[,i])
data4 <- t(CanadianWeather$dailyAv[,,1])
K4 <- cov(data4)
x11()
image.plot(time,time,K4,main='R cov function')
data5 <- lip
help(lip)
View(data5)
time5<-seq(0,350,by=7)
x11()
matplot(time5,data5,type='l')
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time,data5[i,])
data5 <- t(lip)
time5<-seq(0,350,by=7)
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time,data5[i,])
x11()
plot(time5,data5[1,],ylim=c(-40,30))
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
x11()
matplot(time5,data5,type='l')
x11()
matplot(time5,t(data5),type='l')
x11()
plot(time5,data5[1,],ylim=c(-20,15))
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
x11()
plot(time5,data5[1,],ylim=c(-15,15),type='l')
for (i in 2:dim(data5)[1])
lines(time5,data5[i,])
K5 <- cov(data5)
x11()
image.plot(time5,time5,K5,main='Covariance matrix')
data6 <- read.table('watertemp.txt',header=TRUE)
View(data6)
zona<-water[,366]
water <- read.table('watertemp.txt',header=TRUE)
zona<-water[,366]
zona_fac<-as.factor(zona)
water<-water[,1:365]
water<-water[,1:365]
giorni<-1:365
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
View(water)
water <- read.table('watertemp.txt',header=TRUE)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
x11()
plot(giorni,water[1,],ylim=c(0,30),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,30),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
help(plot)
help(palette)
palette.colors()
help(rainbow)
hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
n<-dim(water)[1]
hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
col_palette<-hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col<-col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
n<-dim(water)[1]
col_palette<-hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=col_palette)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow)
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow())
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col=rainbow(dim(data))[1])
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col = rep(1:dim(water)[1])
for (i in 2:dim(water)[1])
lines(giorni,water[i,])
n <- dim(water)[1]
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='lightblue')
for (i in 31:85)
lines(giorni,water[i,],col='mistyrose')
for (i in 86:n)
lines(giorni,water[i,],col='lightcyan')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='blue')
for (i in 31:85)
lines(giorni,water[i,],col='mistyrose')
for (i in 86:n)
lines(giorni,water[i,],col='orange')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l',col='red')
for (i in 2:30)
lines(giorni,water[i,],col='blue')
for (i in 31:85)
lines(giorni,water[i,],col='green')
for (i in 86:n)
lines(giorni,water[i,],col='orange')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,],col='grey')
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,])
data4 <- t(CanadianWeather$dailyAv[,,1])
time <- 1:365
x11()
matplot(data4,type='l',xlab='Day',ylab='Temperature')
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
K4 <- cov(data4)
x11()
image.plot(time,time,K4,main='Covariance matrix')
data5 <- t(lip)
time5<-seq(0,350,by=7)
x11()
matplot(time5,t(data5),type='l')
water <- read.table('watertemp.txt',header=TRUE)
water<-water[,1:365]
giorni<-1:365
x11()
matplot(t(water),type='l',main='water',xlab='giorni',ylab='water',ylim=range(water))
# Commentate i set delle directory non vostre
#setwd("C:/Users/pietr/Desktop/Bayesian Statistics/Progetto/dati/BayesianProject")
setwd("C:/Users/admin/Documents/R/Project_BS/BayesianProject") #GiuliaR
load("Simulated_WP.RData")
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
time <- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
# Covariance matrix and plot
K_4 <- cov(data4)
x11()
image.plot(time,time,K_4,main='Covariance matrix')
eig_4 <- eigen(K_4)
values_4 <- eig_4$values
vectors_4 <- eig_4$vectors
View(vectors_4)
View(vectors_3)
data5 <- read.table('data_model5.txt',header=TRUE)
data5<-data5[,1:365]
time<-1:365
n <- dim(water)[1]
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(giorni,water[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(giorni,water[i,])
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
n <- dim(water)[1]
time<-1:365
n <- dim(data5)[1]
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
# Covariance matrix and plot
K_5 <- cov(data5)
x11()
image.plot(time,time,K_5,main='Covariance matrix')
eig_5 <- eigen(K_5)
values_5 <- eig_5$values
vectors_5 <- eig_5$vectors
gc()
# Commentate i set delle directory non vostre
#setwd("C:/Users/pietr/Desktop/Bayesian Statistics/Progetto/dati/BayesianProject")
setwd("C:/Users/admin/Documents/R/Project_BS/BayesianProject") #GiuliaR
load("Simulated_WP.RData")
load("Simulated_WP.RData")
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
time <- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time,data4[1,],ylim=c(-40,30))
for (i in 2:dim(data4)[1])
lines(time,data4[i,])
# Covariance matrix and plot
K_4 <- cov(data4)
x11()
image.plot(time,time,K_4,main='Covariance matrix')
eig_4 <- eigen(K_4)
values_4 <- eig_4$values
vectors_4 <- eig_4$vectors
data5 <- read.table('data_model5.txt',header=TRUE)
data5<-data5[,1:365]
time<-1:365
n <- dim(data5)[1]
x11()
matplot(t(data5),type='l',main='Data5',xlab='time',ylab='Values',ylim=range(data5))
x11()
plot(time,data5[1,],ylim=c(9,28),type='l')
for (i in 2:n)
lines(time,data5[i,])
# Covariance matrix and plot
K_5 <- cov(data5)
x11()
image.plot(time,time,K_5,main='Covariance matrix')
eig_5 <- eigen(K_5)
values_5 <- eig_5$values
vectors_5 <- eig_5$vectors
save.image("~/R/Project_BS/BayesianProject/Simulated_WP.RData") #GiuliaR
t_points <- 1:365
rm(time)
load("Simulated_WP.RData")
# Covariance Matrix
time <- seq(0,1,1/(t_points-1))
load("Simulated_WP.RData")
# Covariance Matrix
time <- seq(0,1,1/(t_points-1))
data4 <- t(CanadianWeather$dailyAv[,,1])
n <- dim(data4)[1]
t_points<-365
time<- 1:365
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],1000,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=0.1')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],100,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=0.1')
x11()
matplot(t(data4),type='l',xlab='Day',ylab='Temperature')
x11()
plot(time, data4[1,], type = 'l', lwd = 2)
lines(time, f_alpha_approx(data4[1,],1,values_4,vectors_4), type = 'l', lwd = 2, col = 'firebrick2')
lines(time, f_alpha_approx(data4[1,],10,values_4,vectors_4), type = 'l', lwd = 2, col = 'blue')
lines(time, f_alpha_approx(data4[1,],100,values_4,vectors_4), type = 'l', lwd = 2, col = 'forestgreen')
title ('Curves comparison for alpha: best alpha=10')
alpha <- 10
f.data_alpha_sim_4<- matrix(0, nrow = n, ncol = t_points)
for (i in 1:n){
f.data_alpha_sim_4[i,] <- f_alpha_approx(data4[i,],alpha,values_4,vectors_4)
}
setwd("C:/Users/pietr/Desktop/Bayesian Statistics/Progetto/dati/BayesianProject") #Pietro
load('Simulated_WP.RData')
# Choose the model for the simulation:
# simulated data - model 1
data <- data1
eig <- eig_1
rm(list=c('data1','data2','data3','data4','data5'))
rm(list=c('eig_1','eig_2','eig_3','eig_4','eig_5'))
#### Loss function ####
#centroids è una matrice avente n_clust righe e ogni riga è un centroide
gibbs_loss <- function(n_clust, centroids, label ,data){
res = rep(0,n_clust)
for (k in 1:n_clust){
for (i in 1:n){
if (label[i] == k){
sum_partial = alpha_Mahalanobis(alpha,data[i,],centroids[k,],eig$values,eig$vectors)
res[k] = res[k] + sum_partial
}
}
}
tot = sum(res)
return(tot)
}
fda_clustering_mahalanobis <- function(n_clust, alpha, eig, toll,data){
n <- dim(data)[1]
# index of each centroid randomly defined through sampling
y0 <- rep(0,n_clust)
vect_sample <- 1:n
y0[1] <- sample(vect_sample,1)
for (k in 2:n_clust) {
value <- y0[k-1]
for (i in 1:length(vect_sample)){
if (vect_sample[i] == value)
t = i
}
vect_sample <- vect_sample[-t]
y0[k] <- sample(vect_sample,1)
}
# vector of labels
c_lab <- rep(0,n)
# eigenvalues and eigenfunctions for the alpha-mahalanobis function
values <- eig$values
vectors <- eig$vectors
Mahalanobis_Distance <- matrix(0, nrow = n, ncol = n)
for (i in 1:n){
for (j in 1:n){
Mahalanobis_Distance[i,j] <- alpha_Mahalanobis(alpha,data[i,],data[j,],values,vectors)
}
}
# i-th unit belongs to cluster_k if the distance(centroid_k,i-th unit) is the smallest one
Maha_dis <- matrix(0,nrow=n, ncol=n_clust)
for (i in 1:n){
for (k in 1:n_clust) {
Maha_dis[i,k] <- Mahalanobis_Distance[i,y0[k]]
}
index <- which.min(Maha_dis[i,])
c_lab[i] <- index
}
# define the matrix of the centroids (random centroids)
centroids_random <- matrix(0,nrow = n_clust,ncol = dim(data)[2])
for (k in 1:n_clust){
centroids_random[k,] <- data[y0[k],]
}
loss_value1 <- gibbs_loss(n_clust = n_clust, centroids = centroids_random, label = c_lab, data = data)
# update each centroid as the mean of the clusters data
centroids_mean<-matrix(0,nrow = n_clust, ncol = dim(data)[2])
for (k in 1:n_clust){
centroids_mean[k,] <- colMeans(data[which(c_lab==k),])
}
loss_value2 <- gibbs_loss(n_clust = n_clust, centroids = centroids_mean, label = c_lab, data = data)
while(abs(loss_value1 - loss_value2) >= toll){
c_lab <- rep(0,n)
Maha_dis_k <- matrix(0,nrow=n, ncol=n_clust)
for (i in 1:n){
for (k in 1:n_clust) {
Maha_dis_k[i,k] <- alpha_Mahalanobis(alpha,centroids_mean[k,],data[i,],values,vectors)
}
index <- which.min(Maha_dis_k[i,])
c_lab[i] <- index
}
loss_value1 <- loss_value2
for (k in 1:n_clust){
centroids_mean[k,] <- colMeans(data[which(c_lab==k),])
}
loss_value2 <- gibbs_loss(n_clust = n_clust, centroids = centroids_mean, label = c_lab, data = data)
}
return(list("label" = c_lab, "centroids" = centroids_mean, "loss" = loss_value1))
}
# Application on the data
k <- 2
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
clust <- fda_clustering_mahalanobis(n_clust = k, alpha = alpha, eig = eig, toll = 1e-2,  data = data)
c_opt <- clust$label
show(c_opt)  #label switching
dynamicVariableName <- paste0("X_", flag)
flag <- 1
dynamicVariableName <- paste0("X_", flag)
flag <- 1
eig <- eigen(data[which(c_lab==flag),])
c_lab <- cbind(rep(1,80),rep(2,20))
c_lab
c_lab <- rbind(rep(1,80),rep(2,20))
c_lab
c_lab <- c(rep(1,80),rep(2,20))
c_lab
flag <- 1
eig <- eigen(data[which(c_lab==flag),])
